<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>对于Promise的初步了解</title>
    <link href="/2022/11/19/%E5%AF%B9%E4%BA%8EPromise%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/"/>
    <url>/2022/11/19/%E5%AF%B9%E4%BA%8EPromise%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="promise的学习"><a href="#promise的学习" class="headerlink" title="promise的学习"></a>promise的学习</h1><p>promise是es6的新特性，也是最终的特性之一，我写这篇文章的目的是为了记录以便复习，和大家共同学习<br>期间我在学习的过程中参考的博文链接我放在下面<br>  <a href="https://www.cnblogs.com/lvdabao/p/es6-promise-1.html#">https://www.cnblogs.com/lvdabao/p/es6-promise-1.html#</a><br>  参考的视频有黑马对promise的讲解</p><h2 id="promise的作用"><a href="#promise的作用" class="headerlink" title="promise的作用"></a>promise的作用</h2><p>主要用于解决地狱回调函数<br>我们在初步使用promise的时候经常会使用到.then .catch 等一些原型方法 还有resolve， reject的回调函数</p><p>我们下面直接创建一个promise对象来深入了解一下 promise是什么</p><p><img src="https://pic.imgdb.cn/item/63788fcf16f2c2beb1efade1.png"></p><p>通过上面这个图我们可以看到Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。<br>promise更多的是对异步的处理</p><p>下面我们来看一下当我们不使用promise，来读取文件</p><p><img src="https://pic.imgdb.cn/item/637890eb16f2c2beb1f1ac2c.png"></p><p>我们使用nodejs的内置fs来读取文件，我们想要文件按顺序读取的时候就要用到一层一层嵌套，也就是套完 这样问题是解决了<br>但是我们的代码可读性不高，而且日后想要修改的时候也很困难，牵一发而动全身</p><p>那么我们如何来使用promise来去解决这个问题呢<br>我们来自己封装一个读取文件的promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">readFile1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./text/tx1.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,DataStr</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取了file1&#x27;</span>)<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">DataStr</span>)<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看这段我们封装一个读取文件函数 返回值是一个promise对象 那么当我们调用这个函数的时候我们实际得到的是一个promise对象，<br>这也就说明我们可以调用promise的.then()方法 同时这里我先讲解一下Resolve这个方法</p><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>我们可以先将resolved理解成 当我们读取成功后，我们可以将值传给resolve， 再通过.then()进行回调 拿到成功后的值<br>但实际在Promise中resolved代表一种状态，resolve是将Promise的状态置为fullfiled，reject是将Promise的状态置为rejected。<br><strong>这下你应该也能够理解到promise为什么叫做promise了 它是一种承诺，一旦确定为一种状态就不能改变</strong></p><h2 id="下面我们再理解一下-then方法"><a href="#下面我们再理解一下-then方法" class="headerlink" title="下面我们再理解一下.then方法"></a>下面我们再理解一下.then方法</h2><p>.then()方法是我们对promise中执行结果的一个预处理方法，我们可以事先处理我们在成功后要做什么，在失败后要做什么<br>所以then中可以传入两个参数，一个reolve回调函数，是对成功的处理，一个是reject回调函数，是对失败的处理。<br><strong>在then方法中还有一个重要的特点，我们可以在resolve中继续返回一个新的promise对象，那么我们可以在这个then方法后继续使用then方法</strong><br>这是一个重点，决定这我们如何去处理异步函数，如何去解决回调地狱</p><h2 id="下面我们来看一下优化后的代码"><a href="#下面我们来看一下优化后的代码" class="headerlink" title="下面我们来看一下优化后的代码"></a>下面我们来看一下优化后的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">readFile1</span>().<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile2</span>()<br>    &#125;<br>   <br>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile3</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;)<br></code></pre></td></tr></table></figure><p>是不是看着更加优雅。而且解决了我们的问题 对于异步函数的处理 当然我们这里是利用读取文件进行演示的，你可以参考我上面放的链接中的利用<br>定时函数进行模拟</p><p><em>对于promise 你应该有个初步的理解了吧 可能刚开始看的时候确实比较迷 我刚开始也 我尼玛这是啥玩意</em><br>放一个完整代码吧 方便大家参考</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readFile1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./text/tx1.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,DataStr</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取了file1&#x27;</span>)<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">DataStr</span>)<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readFile2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./text/tx2.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,DataStr</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取了file2&#x27;</span>)<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">DataStr</span>)<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readFile3</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./text/tx3.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,DataStr</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取了file3&#x27;</span>)<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">DataStr</span>)<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p<br>&#125;<br><br><span class="hljs-title function_">readFile1</span>().<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile2</span>()<br>    &#125;<br>   <br>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile3</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;)<br></code></pre></td></tr></table></figure><p>##别急我们再来讲解一下reject的使用<br>当我们读取我我文件发生错误 我们可以将错误的信息传给rejected，当我们读取出错时候我们就可以拿到错误信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readFile1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./text/tx6.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,DataStr</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取了file1&#x27;</span>)<br>            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err.<span class="hljs-property">message</span>)<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">DataStr</span>)<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p<br>&#125;<br><br><span class="hljs-title function_">readFile1</span>().<span class="hljs-title function_">then</span>(<br>    <span class="hljs-comment">// 成功的处理</span><br>    <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    &#125;,<br>    <span class="hljs-comment">// 失败的处理</span><br>    <span class="hljs-function">(<span class="hljs-params">reason,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reject&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br><br>    &#125;<br><br>)<br></code></pre></td></tr></table></figure><p>打印出来的结果</p><p><img src="https://pic.imgdb.cn/item/63789f8216f2c2beb1123166.png"></p><p>这样错误信息就被打印出来了</p><p>相信你现在对resolve和reject的用法已经有点思路，多多思考 最好可以将我演示的代码敲一遍出来</p><p>下面我们来学习一下.catch方法来</p><h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p>就是捕获错误信息，如果你学过java我信息你现在心里已经知道他是干什么的了<br>我们可以在开头捕获，和结尾捕获错误的信息 但是这两种写法还是有很大的区别的</p><p><strong>关于cache的写法</strong><br>效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，<br>如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中<br>我们对上面的代码进行改造后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">readFile1</span>().<span class="hljs-title function_">then</span>(<br>    <span class="hljs-comment">// 成功的处理</span><br>    <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    &#125;,<br>    <span class="hljs-comment">// 失败的处理</span><br>    <span class="hljs-comment">// (reason,data)=&gt;&#123;</span><br>    <span class="hljs-comment">//     console.log(&#x27;reject&#x27;)</span><br>    <span class="hljs-comment">//     console.log(reason);</span><br><br>    <span class="hljs-comment">// &#125;</span><br><br>).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">reason</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rejected&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>&#125;)<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://pic.imgdb.cn/item/63789f8216f2c2beb1123166.png"></p><p>看到这里你知道如何使用了吗</p><p>我上面还说过catch写在开头 和结尾有很大区别 我们一起来看看</p><h2 id="放在结尾"><a href="#放在结尾" class="headerlink" title="放在结尾"></a>放在结尾</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">readFile1</span>().<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile2</span>()<br>    &#125;<br>   <br>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile3</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;).<span class="hljs-title function_">catch</span>(<br>    <span class="hljs-function">(<span class="hljs-params">reason</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rejected&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6378b80b16f2c2beb138ddb6.png"></p><h2 id="放在开头"><a href="#放在开头" class="headerlink" title="放在开头"></a>放在开头</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">readFile1</span>().<span class="hljs-title function_">catch</span>(<br>    <span class="hljs-function">(<span class="hljs-params">reason</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rejected&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>    &#125;<br>).<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile2</span>()<br>    &#125;<br>   <br>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFile3</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6378b82a16f2c2beb139304e.png"></p><p>通过比较你发先catch在不同地方的区别了吗<br>在开头捕获到错误剩下的代码会依然执行<br>但是在结尾如果一遇到错误会立马执行catch里面的语句 </p><p>下面我们再来介绍一下 Promise.all(),和 Promise.race()方法</p><h2 id="all的用法"><a href="#all的用法" class="headerlink" title="all的用法"></a>all的用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span><br>.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">readFile1</span>(), <span class="hljs-title function_">readFile2</span>(), <span class="hljs-title function_">readFile3</span>()])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;);<br></code></pre></td></tr></table></figure><p>用Promise.all来执行，all接收一个数组参数，里面的值最终都算返回Promise对象。这样，三个异步操作的并行执行的，<br>等到它们都执行完后才会进到then里面。那么，三个异步操作返回的数据哪里去了呢？都在then里面呢，<br>all会把所有异步操作的结果放进一个数组中传给then，就是上面的results。所以上面代码的输出结果就是：<br><img src="https://pic.imgdb.cn/item/6378ba7d16f2c2beb13e1a20.png"></p><p>有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，<br>一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后<br>，我们再进行页面的初始化。</p><h2 id="race用法"><a href="#race用法" class="headerlink" title="race用法"></a>race用法</h2><p>all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」，<br>这就是race方法，这个词本来就是赛跑的意思。<br>下面我们将readfile1函数延迟一秒执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-title class_">Promise</span><br>.<span class="hljs-title function_">race</span>([<span class="hljs-title function_">readFile1</span>(), <span class="hljs-title function_">readFile2</span>(), <span class="hljs-title function_">readFile3</span>()])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>结果<br><img src="https://pic.imgdb.cn/item/6378bf4716f2c2beb145c1af.png"><br>这三个异步操作同样是并行执行的。结果你应该可以猜到，1秒后runAsync1已经执行完了，此时then里面的就执行了。</p><p>这个race有什么用呢？使用场景还是很多的，比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//请求某个图片资源</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">requestImg</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>        <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>        img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">resolve</span>(img);<br>        &#125;<br>        img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//延时函数，用于给请求计时</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;图片请求超时&#x27;</span>);<br>        &#125;, <span class="hljs-number">5000</span>);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-title class_">Promise</span><br>.<span class="hljs-title function_">race</span>([<span class="hljs-title function_">requestImg</span>(), <span class="hljs-title function_">timeout</span>()])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>&#125;);<br></code></pre></td></tr></table></figure><p>requestImg函数会异步请求一张图片，我把地址写为”xxxxxx”，所以肯定是无法成功请求到的。timeout函数是一个延时5秒的异步操作。<br>我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果5秒之内图片请求成功了，那么遍进入then方法，执行正常的流程。<br>如果5秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。运行结果如下：<br><img src="https://pic.imgdb.cn/item/6378bff216f2c2beb146946c.png"></p><p>好了对于promise我也仅仅是个初学者<br>如果了解更多请看开头的链接，如果有什么想交流的请留言</p>]]></content>
    
    
    
    <tags>
      
      <tag>promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>proxy跨域代理</title>
    <link href="/2022/11/16/proxy%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86/"/>
    <url>/2022/11/16/proxy%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="proxy跨域代理"><a href="#proxy跨域代理" class="headerlink" title="proxy跨域代理"></a>proxy跨域代理</h2><p>主要用于解决后端未配置cros跨域处理<br>我们在前端在vue项目中可以使用proxy代理进行跨域访问<br>#谈谈一下我对proxy代理的理解<br>在我使用proxy代理时我更加感觉它就好比一个中介，当前端进行axios请求时，发现接口不存在，此时这个请求就会交给proxy进行处理，所以我感觉它更像一个中介的存在</p><h2 id="演示如何在vue中使用proxy代理"><a href="#演示如何在vue中使用proxy代理" class="headerlink" title="演示如何在vue中使用proxy代理"></a>演示如何在vue中使用proxy代理</h2><h3 id="首先配置axios"><a href="#首先配置axios" class="headerlink" title="首先配置axios"></a>首先配置axios</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-keyword">const</span> request=axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">// 使用proxy解决跨域的问题 首先将axios请求的接口写成本地接口就不会出现跨域 </span><br>    <span class="hljs-comment">// 等时识别出 接口不存在时候会交给proxy代理接口进行处理</span><br><br>    <span class="hljs-attr">baseURL</span>:<span class="hljs-string">&#x27;http://localhost:8080/&#x27;</span><br>&#125;)<br><span class="hljs-comment">// 共享出去</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></td></tr></table></figure><p><em>baseURL:’<a href="http://localhost:8080/">http://localhost:8080/</a>  配置为本地请求根路径是因为防止出现跨域的问题</em></p><h3 id="在vue-config-js文件中配置proxy"><a href="#在vue-config-js文件中配置proxy" class="headerlink" title="在vue.config.js文件中配置proxy"></a>在vue.config.js文件中配置proxy</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <br>  <span class="hljs-attr">devServer</span>:&#123;<br>    <span class="hljs-attr">proxy</span>:<span class="hljs-string">&#x27;http://www.escook.cn/&#x27;</span>,<br> <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就用proxy跨域代理解决了在后端未进行跨域配置时所出出现的跨域问题</p>]]></content>
    
    
    
    <tags>
      
      <tag>proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue</title>
    <link href="/2022/11/08/vue/"/>
    <url>/2022/11/08/vue/</url>
    
    <content type="html"><![CDATA[<p>图片: <img src="https://img-home.csdnimg.cn/images/20220524100510.png" alt="Alt"><br>链接: <a href="https://www.bilibili.com/">b站</a></p><hr>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/07/hello-world/"/>
    <url>/2022/11/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
